What happens when you initialize a repository? Why do you need to do it?
    -Initialized empty Git repository.
    -In order not to automatically include files you actually don't want to keep track of.
    
How is the staging area different from the working directory and the repository?
What value do you think it offers?
    -Staging area is the preparation area for files to be committed. 
    -It helps to divide changes in the working directory into several commits, each of which consists of a group of changes that represent a logical change to the relevant files.

How can you use the staging area to make sure you have one commit per logical
change?
    -First add files that are related to the first logical change I want to commit, and then make a commit.
    
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
    -as described in the lesson, branches are useful for when you have working code and want to try a variation in functionality without breaking what youcurrently have.
    -By branching you create a copy of the master (or wherever the head is) and then "branch off" at that point.
    -The main branch stays intact and unchanged, but you are free to make any changes to the new branch.
    
How do the diagrams help you visualize the branch structure?
    -As with any visualization activity, by drawing out the branch structure you can see how the commits and branches relate to each other and can readily identify where each branch exists in relation to the others, and which commits are reachable from each branch. This can help you see why a bug fix or feature is not included in a particlar commit that may be in a different branch.
    
What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
    -Merging two branches incorporates the changes from two branches into a new commit. 
    -This allows developers to create new features or work independently of one another and then combine their efforts into a working version without stepping on each other's toes. 
    -It is represented in the diagram as two branches coming together because that is effectively what is happening.
    
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
    Pros:
        - Saves your time, especially when each non-conflicting merge is trivial.
        - Makes you concentrate on the changes which actually contain conflicts.

    Cons:
        - Can't think of any definite ones. Maybe can make it easier to overlook the potentially dangerous situation where two person are working on the same file at the same time.

